1.CoordinatorLayout与Behavior 是如何工作的
  在CoordinatorLayout 中关联使用的AppBarLayout等直接子类的的属性layout_behavior引用。
  其他的布局中使用不能解析。
  从CoordinatorLayout我们查看LayoutParam代码可以知道这里获取了有关直接子类的属性的东西。可以看到
   mBehavior = parseBehavior(context, attrs, a.getString(
                          R.styleable.CoordinatorLayout_Layout_layout_behavior)); 这句去获取了
   layout_behavior这个属性引用的Behavior。这里解析获取到了这个Behavior的实现。通过获取全类名，反射的方式
   获取了Behavior的类并创建了c.newInstance(context, attrs);实例。完成后调用mBehavior.onAttachedToLayoutParams(this);
   添加到实例。

  CoordinatorLayout 中有一个onNestScroll();方法，里边for循环调用子View的onNestScroll();
  CoordinatorLayout 中自己没有调用onNestScroll()方法。应该是CoordinatorLayout监听子View滑动的动作，监听到后传递给子类处理。
  可能在onTouchEvent 或者onInterceptTouchEvent()中拦截处理滑动
  流程是：  startNestedScroll(nestedScrollAxis, TYPE_TOUCH);->getScrollingChildHelper().startNestedScroll(axes, type);
  ->ViewParentCompat.onNestedScrollAccepted(p, child, mView, axes, type);-> IMPL.onNestedScrollAccepted(parent, child, target, nestedScrollAxes);
  -> return parent.onStartNestedScroll(child, target, nestedScrollAxes);
  最后调用了ViewParent 的onStartNestedScroll();也就是调用了CoordinatorLayout的onStartNestedScroll()。

2.SnackBar
  1.一直显示底部
    有一个SnackBar布局文件，设置了属性在bottom
  2.动画是怎么实现的
    SnackBar make方法中我们可知道，有一个布局，布局中有一个TextView 和Button ，把这个布局解析了添加到了SnackBar中。
  3.会把FloatingBar往上挤
    必须是CoordinatorLayout 布局中才有效果。

  SnackBar.make();make()方法中ViewGroup parent = findSuitableParent(view); 先去获取父布局，
  返回一个CoordinatorLayout 或者FragmeLayout,Window地下有一个Fragment 的R.id.content.

  make()方法内部 mView = (SnackbarBaseLayout) inflater.inflate(
                            R.layout.design_layout_snackbar, mTargetParent, false);
                    mView.addView(content);
  把SnackBar的布局加载到了SnackbarBaseLayout上。
 一个show();和dismiss()方法，在源码中看到,
 public void show() {
         SnackbarManager.getInstance().show(mDuration, mManagerCallback);
     }
 查看mManagerCallback,其中走到了这个handler中.
   static {
         sHandler = new Handler(Looper.getMainLooper(), new Handler.Callback() {
             @Override
             public boolean handleMessage(Message message) {
                 switch (message.what) {
                     case MSG_SHOW:
                         ((BaseTransientBottomBar) message.obj).showView();
                         return true;
                     case MSG_DISMISS:
                         ((BaseTransientBottomBar) message.obj).hideView(message.arg1);
                         return true;
                 }
                 return false;
             }
         });
     }

 在上述代码中看到 final Behavior behavior = new Behavior();设置了一个Behavior
 查看这个Behavior代码知道SwipeDismissBehavior<V extends View> extends CoordinatorLayout.Behavior<V>,最终继承了CoordinatorLayout.Behavior的Behavior,所以
 有些效果是在CoordinatorLayout 中才能有效.

 最后添加了动画:
   if (shouldAnimate()) {
         // If animations are enabled, animate it in
         animateViewIn();
     } else {
         // Else if anims are disabled just call back now
         onViewShown();
     }

 大致代码:
  final ValueAnimator animator = new ValueAnimator();
             animator.setIntValues(viewHeight, 0);
             animator.setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR);
             animator.setDuration(ANIMATION_DURATION);
             animator.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationStart(Animator animator) {
                     mContentViewCallback.animateContentIn(
                             ANIMATION_DURATION - ANIMATION_FADE_DURATION,
                             ANIMATION_FADE_DURATION);
                 }

                 @Override
                 public void onAnimationEnd(Animator animator) {
                     onViewShown();
                 }
             });
  这样我们就知道了这个是怎么实现的

  为什么往上挤?
  在FloatingActionBar的第一行我们发现定义了一个Behavior注解给这个类使用.
  @CoordinatorLayout.DefaultBehavior(FloatingActionButton.Behavior.class)
  ...