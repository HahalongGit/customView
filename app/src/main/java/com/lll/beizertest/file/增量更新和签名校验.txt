市场上火热的app 一般都比较大，采用增量更新来优化用户体验。
增量更新原理就是对比新的apk和旧的apk的差异，提取出不一样的文件生成一个增量包，然后用户端在服务器下载增量包，
apk内部提取用户安装的包，合并增量包和旧的apk最后重新安装的过程。
网上提供了相关的工具来实现这个算法：

1.下载bsdiff文件包获取算法的c程序代码
2.下载bsdiff的依赖包bzlib 解压留下需要的C文件和h文件

3.修改bsdiff中的main方法为我们自己的方法，配置传递参数

4.合并在jni中运行
  jni的配置运行需要自行了解
  有两个方法
  A.cMake方式 在生成的配置文件中添加C文件
  B.原始的ndkBuild方式  这个方式需要查找设置gadle文件和Android.mk以及Aplication.mk
5.编写合并差分包的代码，并写安装的代码

6.服务器端生成包供app下载。写好dll动态库
  下载bdsiff-win 工具
  同样编写native方法 编写相关的方法

  生成dll工具需要Visual Studio 开发工具生成。新建Visual C++ 空项目 ，把下载的Bsdiff-win的代码拷贝的Vsiual-studio项目目录中
  在VisualStudio 工程目录中添加头文件
  配置解决异常，配置生成动态库文件。

  拷贝生成差分包的头文件到项目中配置好厚、然后写差分包的实现代码。

  最后完成差分包的生成和安装。

  签名校验：
  获取本地apk的签名，然后和我们新生成的apk进行验证。
  不知道怎么处理，可以看看源码中是怎么验证的，然后根据不同的版本处理。android系统应用中有有关如何安装处理的应用。
  我们的应用安装就是系统的一个Activity完成的，这个activity回去校验签名。
  主要考虑是反射的应用。
