说明：
对初中三角形的复习，三角函数的复习。
Math 类中:PI 代表180°对应的弧度。
三角函数：sin();cos(); tan();参数是一个弧度值；结果是一个三角函数值。
反三角函数 如：atan();参数，正切值或者斜率；结果：角度对应的弧度值。
对android 自定义view的学习，对Path 路径绘制的学习，对贝塞尔曲线的学习（Path就是用来绘制曲线的贝塞尔曲线）。
如：
System.out.println("ExampleUnitTest-Sin 90°="+Math.sin(Math.PI/2));
System.out.println("ExampleUnitTest-30°-1="+Math.toDegrees(Math.PI/6));
System.out.println("ExampleUnitTest-30°-2="+Math.toDegrees(Math.asin(Math.sin(Math.PI/6))));
System.out.println("ExampleUnitTest-sin30°="+Math.sin(Math.PI/6));
System.out.println("ExampleUnitTest-asin 0.5="+Math.toDegrees(Math.asin(0.5)));//求一个正弦值的弧度对应角度
System.out.println("ExampleUnitTest-cos 60°=="+Math.cos(Math.PI/3));
System.out.println("ExampleUnitTest-tan 45°=="+Math.tan(Math.PI/4));
System.out.println("ExampleUnitTest-atan=="+Math.atan(Math.tan(Math.PI/4)));//求孤独
System.out.println("ExampleUnitTest-atan1=="+Math.atan(1));//求斜率对应的孤独
System.out.println("ExampleUnitTest-atan1=="+Math.toDegrees(Math.atan(1)));//求斜率对应的孤独的对应角度
结果：

动画：补件动画，帧动画，属性动画（3.0以上添加）
属性动画目前可以实现几乎所有的动画效果，属性动画中用到的类ValueAnimator  ObjectAnimator,属性动画就是通过不断的改变对象的属性来完成
动画的，ValueAnimator 和ObjectAnimator 完成了从初始值到结束值的计算

估值器：继承自TypeEvaluator 接口实现的一个类，接口只有一个方法需要实现。
【这里要注意的是：接口是带有泛型的，我们可以传任意一个类型，也可以是自定义的类型参数做处理。】
public T evaluate(float fraction, T startValue, T endValue);
系统提供的实现类有如：
IntEvaluator
源码：（参数1可以理解是一个动画的执行时间。参数2是开始值，参数3是结束的值，通过一个公式返回当前目前时间的fraction 值）
public class IntEvaluator implements TypeEvaluator<Integer> {

    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {
        int startInt = startValue;
        return (int)(startInt + fraction * (endValue - startInt));
    }
}

其他的估值器和这个IntEvaluator 类似，实现方法，返回一个当前时间要执行的值。我们可以通过其他的数学公式改变当前返回的值。

常用的方法：ofFloat()、ofInt();ofObject()等。调用这些方法创建一个ValueAnimator对象,可以操作这个对象完成其他的动画功能。
举例：
1：ValueAnimator valueAnimator = ValueAnimator.ofFloat();
2：ValueAnimator bizerAnimator = ObjectAnimator.ofObject(loveTypeEvalautor, p0, p3);//c起点和终点
上面的ofObject方法设置了估值器参数,ofObject()是一个多重载的方法，参数不同。

ValueAnimator对象常用到的方法：
addUpdateListener();对动画的执行添加一个监听，我们可以通过这个操作需要动画的View。
addListener();对动画执行过程进行监听，如在动画开始，中间，结束的不同位置设置操作。
setInterpolator();给动画添加一个差值器（改变动画执行的速度）
其他的方法：设置动画的执行时间，设置动画重复次数，添加动画的执行方式等等。

插值器：
可以给某一个动画设置一个插值器，改变动画的执行速度，如：先加速，后减速；匀加速等等。
系统提供的插值器继承了BaseInterpolator ,BaseInterpolator实现了Interpolator接口，Interpolator接口最终继承了TimeInterpolator接口
这个接口只有一个方法需要我们实现： float getInterpolation(float input);
系统提供的插值器实现：
AccelerateDecelerateInterpolator //开始和结束时慢，中间快
 public float getInterpolation(float input) {
        return (float)(Math.cos((input + 1) * Math.PI) / 2.0f) + 0.5f;
        //通过一个函数改变当前的系数，改变动画的执行
    }

在ValueAnimator 类中调用方法获取这个返回值并使用：
   void animateValue(float fraction) {
        fraction = mInterpolator.getInterpolation(fraction);
        mCurrentFraction = fraction;
        int numValues = mValues.length;
        for (int i = 0; i < numValues; ++i) {
            mValues[i].calculateValue(fraction);
        }
        if (mUpdateListeners != null) {
            int numListeners = mUpdateListeners.size();
            for (int i = 0; i < numListeners; ++i) {
                mUpdateListeners.get(i).onAnimationUpdate(this);
            }
        }
    }
