ActivityThread -> 启动Activity onCreate,onResume执行流程，performLaunchActivity()方法启动Activity
DecorView

获取控件的宽高，能获取到数据，是因为调用了onMeasure 指定。
setContentView()->
PhoneWindow
//**********************************************************************************************//
ViewRootImpl 是最外层的布局，DrcorView 是第二层的View（WindowManagerGlobal 中实例化）
ViweRootImpl 中 root.setView()-->requestLayout()->scheduleTraversal();->doTraversal()->performTraversals();
这里开始进入Android 的绘制流程。

WindowManagerGlobal 中实例化ViewRootImpl
绘制流程中第一个调用的方法：performMesaure();开始调用DecorView 的测量方法,然后去调用其他应用View的onMeasure 方法
ViewGroup 中的measureChildWithMargins();调用getChildMeasureSpec();获取子布局和副布局的测量模式
调用：child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
比如LinerLayout 比如垂直的要循环计算子View的高度，叠加。（测量时从外往里递归的）拿子view的宽高计算自己的宽高。

DecorView(加载系统资源系统布局有一个R.id.content 是一个FragmentLayout)，创建一个DrcorView 并且添加到系统 View中才开始绘制。

setContentView();


actovity 的onRsume 方法之后才执行绘制：
mTextView.post(new Runnable() {
        @Override
        public void run() {
            Log.e("TAG","mTextView-Runnable:"+mTextView.getMeasuredHeight()+",width:"+mTextView.getMeasuredWidth());
            float value = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,mTextView.getMeasuredWidth(),getResources().getDisplayMetrics());
            Log.e("TAG","mTextView-Runnable2:"+mTextView.getMeasuredHeight()+",width:"+value);
        }
    });
    // 可以获取到View的宽高，post方法添加到衣蛾Queue中，刚开始并没有执行，要在onResume之后才会执行。


####
Activity 启动流程：
ActivityThread 类
handleLaunchActivity()启动，activity的 onCreate方法调用
//Activity a = performLaunchActivity(r, customIntent); 创建

这里才开始View的绘制流程。onMeasure ,onLayout,onDraw方法执行。
performResumeActivity();//onCreate();
performResumeAcivity();onResume();
（Activity 的onCreate 和onResume 执行没有找到？？？）
handleResumeActivity();//(ViewManager = getWindowManager)vw.addView();DecorView 才加载到WindowManager 中，
WindowManagerGlobal 中实例化ViewRootImpl
WindowManagerGlobal 中的 ViewRootImpl root的实例调用addView 后开始绘制（WindowManagerImpl ->WindowManagerGlobal -> ViewRootImpl 的addView方法）

流程：
addView ->requestLayout ->scheduleTraversals->performTraversals()->doTraversal()->performTraversals()->performMeasure()
-> mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);(View中开始从一个布局的根布局开始测量)->onMeasure()
这里的mView 就可能是一个LinearLayout，RelativeLayout等开始的根布局。假如从LinearLayout开始调用onMeasure我们就可以知道了。
从这开始测量LinearLayout ，然后循环调用子View 的onMeasure 方法，同时给传递参数childWidthMeasureSpec 和childHeightMeasureSpec（child.measure(childWidthMeasureSpec, childHeightMeasureSpec);）

比如我们自定义View 去重写onMeasure 就获取到这两个参数childWidthMeasureSpec、childHeightMeasureSpec。

####################
//ViewGroup中测量指定子View 的宽高，设置修改wrap_content 或者Match_parent 指定子view 的宽高和测量模式，源码中有写出：View自己的wrap_content 或者match_parent
和父布局的wrap_content 或者match_parent共同决定子view的，widthMode和heightMode 的。如果父布局是match_parent,子View 设置march_parent才会有效，否则父布局设置
了wrap_content，子View 设置march_parent 会被父布局的getChildMeasureSpec 方法修改成wrap_content。

public static int getChildMeasureSpec(int spec, int padding, int childDimension) {
        int specMode = MeasureSpec.getMode(spec);
        int specSize = MeasureSpec.getSize(spec);

        int size = Math.max(0, specSize - padding);

        int resultSize = 0;
        int resultMode = 0;

        switch (specMode) {
        ...
        }

 }
 #########这里测量完成后我们的布局才有宽高


 View的绘制流程：
 测量、摆放、绘制

 ViewRootImpl 中：
  requestLayout()->
  performMeasure();测量布局View的大小，ViewGroup 中循环测量子view的大小，父布局先获取测量模式，传递给子View，子View根据传递的
  测量模式，计算自己的大小，调用set方法设置到宽高中，父View在取子View的宽高，从而计算自己的宽高。
  performLayout();调用子view的layout()方法，然后调用onLayout()
  performDraw();绘制布局。绘制自己还有子View，包括背景等。调用了mView.draw()方法.
  draw中又调用了其他的绘制方法，drawBackground()等。
  onDraw 的绘制流程中使用了模板设计模式，提供了一个模板，自己没有实现，给子类去实现。

