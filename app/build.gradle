apply plugin: 'com.android.application'
//apply plugin: 'com.alibaba.arouter'
apply from: 'test.gradle'//创建一个test.gradle文件的方式添加插件，引入test.gradle文件
//apply plugin: CustomPulginInBuildGradle // 在本文件中定义的脚本插件
//apply plugin: DiguaPorjectPlugin  //直接引用model的tast
// 这个plugin后的字符串就是插件定义的properties中的文件名
//apply plugin: 'com.digua.buildsrc' //通过发布的plguin引用buildSrc model 中定义的插件

///////////////引用本地发布的plugin设置 一下设置可以去掉 //////
//只用
//apply plugin: 'com.digua.buildsrc'////////////////////

apply from: "${rootProject.rootDir}/config.gradle" //添加一个配置,通过config.gradle引入配置

buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
    }
    dependencies {
//        classpath 'com.digua.buildsrc.plugin:buildSrc:1.0.0'
//        classpath "com.alibaba:arouter-register:1.5.1"
    }
}
////////////////////////////////////////////

android {
//    compileSdkVersion 27
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.lll.beizertest"
        minSdkVersion rootProject.ext.minSdkVersion
//        targetSdkVersion 24
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        ndk {
//            moduleName "native-lib"         //生成的so名字
//            abiFilters "armeabi", "armeabi-v7a", "x86"  //输出指定三种abi体系结构下的so库。
//        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        compileOptions {
            targetCompatibility = '1.8'
            sourceCompatibility = '1.8'
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    allprojects {
        repositories {
            jcenter()
            maven { url 'https://jitpack.io' }
            maven {
                url 'https://maven.google.com/'
                name 'Google'
            }
        }
    }

    sourceSets {
        main {
            println("sourceSets-isRunAlone:" + isRunAlone)
            manifest.srcFile 'src/main/AndroidManifest.xml'
//            if (!isRunAlone) {
//                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
////                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
//            } else {
//                manifest.srcFile 'src/main/AndroidManifest.xml'
//            }
        }
    }

    viewBinding {
        enabled = true
    }

}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.2'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation 'com.google.code.gson:gson:2.2.4'
    implementation 'org.litepal.android:core:1.6.1'
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.2.0'
    implementation project(':imageselectlibrary')
//    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'

    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0'

//    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'// RxPermission 权限
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'// RxPermission 权限

    // google Eastpermission
    implementation 'pub.devrel:easypermissions:2.0.1'
    //bugly
    implementation 'com.tencent.bugly:crashreport:3.3.3'

    //图片加载
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    implementation 'com.alibaba:arouter-api:1.5.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.5.1'

    implementation 'com.android.support:multidex:1.0.3'

//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.6.3' //添加leakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:2.7' //添加leakCanary 2.7版本不需要在applicaiton中注册
}

/**
 * 定义一个插件
 */
class CustomPulginInBuildGradle implements Plugin<Project> {

    @Override
    void apply(Project target) {
        target.task("runnginDigua") {
            def a = "这是一个脚本 gradle形式的plugin插件"
            def b = target.toString()
            println(a + b)
        }
    }
}
